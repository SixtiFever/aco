import random
import numpy as np
from numpy.random import choice as np_choice

class ACO:
    
    def __init__(self, graph, n_a, n_c, a, b, rho):
        self.D = graph
        self.num_ants = n_a
        self.num_cities = n_c
        self.alpha = a
        self.beta = b
        self.rho = rho
        self.tour_dict = dict()
        self.T = [[ 1.0 for i in range(self.num_cities) ] for j in range(self.num_cities)]
        self.H = [[0 if i == j else round(1 / self.D[i][j], 4) for j in range(self.num_cities)] for i in range(self.num_cities)]
        self.tours_created = 0
        
    
#     def calculate_transition_probabilities(self, ant_tour, visited):
#         current_city = ant_tour[-1]  # Get the current city of the ant's tour
#         T_np = np.array(self.T[current_city])  # Extract pheromone levels for current city
#         H_np = np.array(self.H[current_city])
#         T_np[list(visited)] = 0.0  # Set pheromone levels of visited cities to zero
#         epsilon = 1e-10  # Small constant to avoid division by zero

#         # Calculate probabilities using vectorized operations
#         probabilities = T_np ** self.alpha * H_np ** self.beta

#         # Normalize probabilities to ensure they sum up to 1
#         total_prob = np.sum(probabilities)
#         probabilities /= total_prob + epsilon

#         return probabilities.tolist()

    def calculate_tour_lengths(self, tours):
        for tour in tours:
            dist = 0
            tour_tuple = tuple(tour)
            for i in range(len(tour) - 1):
                dist += self.D[tour[i]][tour[i+1]]
            if tour_tuple in self.tour_dict:
                if self.tour_dict[tour_tuple] > dist:
                    self.tour_dict[tour_tuple] = dist
            else:
                self.tour_dict[tour_tuple] = dist
            dist = 0
    
    def calculate_transition_probabilities(self, ant_tour, visited):
        """
        Takes an ant's current tour and the set of visited cities.
        Calculates the probabilities of moving to unvisited cities (not the current city) 
        based on pheromone levels and distances.
        Adjusts the probabilities accordingly and returns a list of tuples containing city 
        index and its probability for the ant to move there.
        """
        current_city = ant_tour[-1]
        denominator = 0.0
        
        N = [0.0] * self.num_cities # store numerators
        P = [0.0] * self.num_cities # list to hold probability of next transition

        # calculate numerator and denominator
        for i in range(self.num_cities):
            if i not in visited:
                N[i] = (self.T[current_city][i] ** self.alpha) * ((1/self.num_cities) ** self.beta)
                denominator += N[i]

        
        # calculate probabilities
        for i in range(self.num_cities):
            P[i] = N[i] / denominator
        
        return P
    
    
    def decide_move(self, P):
        
        pnp = np.array(P)
        cp = 0
        r = random.random()
        for i in range(len(pnp)):
            cp += pnp[i]
            if cp >= r:
                return i

    
    def update_pheromones(self, tours):
        T_np = np.array(self.T)
        T_np *= (1-self.rho)
        self.T = T_np.tolist()

        # iterate ant tours
        for tour in tours:
            tour_distance = sum(self.D[tour[i]][tour[i + 1]] for i in range(len(tour) - 1))
            pheromone_deposit = 1/tour_distance
            # update pheromone model based on the tours distance
            for i in range(len(tour) - 1):
                self.T[tour[i]][tour[i + 1]] += (pheromone_deposit+1)
    
    
    def run_aco(self):
        """
        For all ants, generates a route from a random start point
        """

        tours = []
        
        iters = round(10000/self.num_ants)

        for i in range(0,iters):
            for j in range(0, self.num_ants):
                ant_tour = []
                visited = set()
                start_city = random.randint(0, self.num_cities-1)
                ant_tour.append(start_city)
                visited.add(start_city)
                for i in range(self.num_cities-1):
                    # generate tour for ant i
                    probs = self.calculate_transition_probabilities(ant_tour, visited)
                    next_move = self.decide_move(probs)
                    ant_tour.append(next_move)
                    visited.add(next_move)

                tours.append(ant_tour)
                
            #Â update pheromone model    
            self.update_pheromones(tours)
            
        self.calculate_tour_lengths(tours)
        
        return self.tour_dict
    

def gen_distance_matrix(filename):
    file = open(filename, 'r')
    D = []
    row = []
    incity = False
    for line in file:
        if "<vertex>" in line: # new city, skip current line
            incity = True
            row = []
            continue

        if "</vertex>" in line: # end city
            D.append(row)
            incity = False

        if incity:
            n = float(line.split('"')[1])
            row.append(n)
    return D


D = gen_distance_matrix('source_brazil.xml')
ants = 50
cities = 57

aco = ACO(D, ants, cities, 1, 2, 0.3)
tours = aco.run_aco()
ranked = sorted(aco.tour_dict.items(), key=lambda tup: tup[1])
print(ranked[0:20])
